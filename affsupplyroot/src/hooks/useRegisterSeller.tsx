import { useState, useMemo } from "react";
import api from "@/lib/Axios/axios";
import useAuth from "./useAuth";
import { toast } from "sonner";

export interface SellerPayload {
  companyName: string;
  brandName: string;
  businessPhone: string;
  businessAddress: string;
  description: string;
  taxCode?: string;
  logo?: File | Blob;
  document?: File | Blob;
}

export interface SellerProfile {
  id: string;
  userId: string;
  companyName: string;
  brandName: string;
  businessPhone: string;
  businessAddress: string;
  description: string;
  taxCode?: string;
  status: "PENDING" | "APPROVED" | "REJECTED";
  rejectionReason?: string;
  createdAt: string;
  updatedAt: string;
  logoUrl?: string;
  documentUrl?: string;
}

export interface Seller extends SellerProfile {
  user: {
    id: string;
    name: string;
    email: string;
    phone?: string;
    avatar?: string;
  };
}

interface APIResponse<T> {
  data: T;
  message?: string;
  status?: number;
}

export default function useRegisterSeller() {
  const { state } = useAuth();
  const token = state?.token;
  const [loading, setLoading] = useState(false);

  // üîë T·∫°o header ƒë·ªông c√≥ token
  const headers = useMemo(() => ({
    Authorization: `Bearer ${state?.token}`,
    "Content-Type": "application/json",
  }), [state?.token]);

  // ==============================
  // üü¢ 1Ô∏è‚É£ ƒêƒÉng k√Ω Seller
  // ==============================
  const registerSeller = async (payload: SellerPayload) => {
    if (!token) {
      toast.error("‚ö†Ô∏è Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc khi th·ª±c hi·ªán h√†nh ƒë·ªông n√†y!");
      return;
    }

    const formData = new FormData();
    Object.entries(payload).forEach(([key, value]) => {
      if (value) formData.append(key, value instanceof Blob ? value : String(value));
    });

    try {
      setLoading(true);
      const { data } = await api.post<APIResponse<SellerProfile>>(
        "/api/v1/seller/register",
        formData,
        { headers: { ...headers, "Content-Type": "multipart/form-data" } }
      );
      toast.success("üéâ ƒêƒÉng k√Ω seller th√†nh c√¥ng!");
      return data.data;
    } catch (err: any) {
      toast.error(err.response?.data?.message || "L·ªói khi ƒëƒÉng k√Ω seller");
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // ==============================
  // üü° 2Ô∏è‚É£ L·∫•y profile seller
  // ==============================
  const fetchSellerProfile = async () => {
    if (!token) return;
    setLoading(true);
    try {
      const { data } = await api.get<APIResponse<SellerProfile>>(
        "/api/v1/seller/register/profile",
        { headers }
      );
      return data.data;
    } catch (err: any) {
      toast.error(err.response?.data?.message || "Kh√¥ng th·ªÉ t·∫£i profile seller");
      throw err;
    } finally {
      setLoading(false);
    }
  };

  // ==============================
  // üü† 3Ô∏è‚É£ L·∫•y danh s√°ch seller (admin)
  // ==============================
  const fetchSellers = async (status?: string) => {
    if (!token) return [];
    setLoading(true);
    try {
      const { data } = await api.get<APIResponse<Seller[]>>("/api/v1/sellers", {
        headers,
        params: status ? { status } : {},
      });
      return data.data;
    } catch (err: any) {
      toast.error(err.response?.data?.message || "Kh√¥ng th·ªÉ t·∫£i danh s√°ch seller");
      return [];
    } finally {
      setLoading(false);
    }
  };

  // ==============================
  // üîµ 4Ô∏è‚É£ L·∫•y chi ti·∫øt seller
  // ==============================
  const fetchSellerDetail = async (id: string) => {
    if (!token) return null;
    setLoading(true);
    try {
      const { data } = await api.get<APIResponse<Seller>>(`/api/v1/sellers/${id}`, { headers });
      return data.data;
    } catch (err: any) {
      toast.error(err.response?.data?.message || "Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt seller");
      return null;
    } finally {
      setLoading(false);
    }
  };

  // ==============================
  // üü£ 5Ô∏è‚É£ Duy·ªát seller
  // ==============================
  const approveSeller = async (id: string) => {
    if (!token) return;
    try {
      setLoading(true);
      await api.patch(`/api/v1/sellers/${id}/approve`, { headers });
      toast.success("‚úÖ Seller ƒë√£ ƒë∆∞·ª£c duy·ªát!");
    } catch (err: any) {
      toast.error(err.response?.data?.message || "L·ªói khi duy·ªát seller");
    } finally {
      setLoading(false);
    }
  };

  // ==============================
  // üîª 6Ô∏è‚É£ T·ª´ ch·ªëi seller
  // ==============================
  const rejectSeller = async (id: string, reason: string) => {
    if (!token) return;
    try {
      setLoading(true);
      await api.patch(`/api/v1/sellers/${id}/reject`, { rejectionReason: reason }, { headers });
      toast.success("üö´ ƒê√£ t·ª´ ch·ªëi h·ªì s∆° seller.");
    } catch (err: any) {
      toast.error(err.response?.data?.message || "L·ªói khi t·ª´ ch·ªëi seller");
    } finally {
      setLoading(false);
    }
  };

  // ==============================
  // üîÅ 7Ô∏è‚É£ G·ª≠i l·∫°i h·ªì s∆° seller
  // ==============================
  const resubmitSeller = async (payload: SellerPayload) => {
    if (!token) return;

    const formData = new FormData();
    Object.entries(payload).forEach(([key, value]) => {
      if (value) formData.append(key, value instanceof Blob ? value : String(value));
    });

    try {
      setLoading(true);
      const { data } = await api.patch<APIResponse<SellerProfile>>(
        "/api/v1/seller/register/resubmit",
        formData,
        { headers: { ...headers, "Content-Type": "multipart/form-data" } }
      );
      toast.success("üîÑ G·ª≠i l·∫°i h·ªì s∆° th√†nh c√¥ng!");
      return data.data;
    } catch (err: any) {
      toast.error(err.response?.data?.message || "L·ªói khi g·ª≠i l·∫°i h·ªì s∆° seller");
      throw err;
    } finally {
      setLoading(false);
    }
  };

  return {
    loading,
    registerSeller,
    fetchSellerProfile,
    fetchSellers,
    fetchSellerDetail,
    approveSeller,
    rejectSeller,
    resubmitSeller,
  };
}
